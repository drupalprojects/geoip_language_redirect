<?php

/**
 * Wrapper for various functions used in Drupal
 * used to make unit-tests possible.
 */
class GeoIpDrupal {
  protected $originalCache = NULL;

  public function readCookie() {
    session_cache_get('geoip_redirect');
  }
  /**
   * Set the language cookie.
   */
  public function setCookie($value) {
    session_cache_set('geoip_redirect', $value);
  }
  public function currentPath() {
    return current_path();
  }
  public function currentLanguage() {
    return $GLOBALS['language']->language;
  }
  public function defaultLanguage() {
    return language_default()->language;
  }
  public function redirect($path, $language) {
    drupal_goto($path, array('language' => $language));
  }
  public function switchLinks($path) {
    $links = language_negotiation_get_switch_links('language', $path);
    return $links ? $links->links : NULL;
  }
  /**
   * Check if the current logged-in user has access to a path.
   */
  public function checkAccess($path) {
    return ($router_item = menu_get_item($path)) && $router_item['access'];
  }

  /**
   * Disable Drupal's page-cache during hook_boot().
   */
  public function disableCache() {
    if ($this->originalCache = variable_get('cache')) {
      $GLOBALS['conf']['cache'] = FALSE;
    }
  }
  
  /**
   * Serve the page from cache and end execution.
   */
  public function serveFromCache() {
    if ($this->originalCache) {
      $GLOBALS['conf']['cache'] = $this->originalCache;
      $cache = drupal_page_get_cache();
      if (is_object($cache)) {
        header('X-Drupal-Cache: HIT');
        drupal_serve_page_from_cache($cache);
        if (variable_get('page_cache_invoke_hooks', TRUE)) {
          bootstrap_invoke_all('exit');
        }
        // We are done.
        exit;
      }
    }
  }
  
  /**
   * Get current users country from GeoIP.
   */
  public function getCountry() {
    // use @: see https://bugs.php.net/bug.php?id=59753
    if (function_exists('geoip_country_code_by_name')) {
      return @geoip_country_code_by_name(ip_address());
    }
  }
  
  /**
   * Get mapping from ISO country-codes to language-codes.
   */
  public function getMapping() {
    variable_get('geoip_redirect_mapping', array());
  }
  
  public function baseUrl() {
    return $GLOBALS['base_url'];
  }
  
  public function referer() {
    return $_SERVER['HTTP_REFERER'];
  }
}

abstract class GeoIpRedirectBase {
  protected $api;

  public function __construct($api) {
    $this->api = $api;
  }
  /**
   * Check if redirect is still possible and redirect if
   * it's already known where.
   */
  public function checkAndRedirect() {
    return TRUE;
  }
  
  /**
   * Redirect to the same page in a different language.
   */
  public function redirect($langCode) {
    $this->api->setCookie($langCode);
    $path = isset($path) ? $path : $this->api->currentPath();
    if (!($links = $this->api->switchLinks($path))) {
      return;
    }
    if (!isset($links[$langCode]) || !isset($links[$langCode]['href'])) {
      $langCode = $this->api->defaultLanguage();
    }
    // Don't redirect to the very same language.
    if ($langCode == $this->api->currentLanguage()) {
      return;
    }
    if (isset($links[$langCode])) {
      $link = &$links[$langCode];
      $path = isset($link['href']) ? $link['href'] : $path;
      if ($this->api->checkAccess($path)) {
        $this->api->redirect($path, $link['language']);
      }
    }
  }
}

class GeoIpRedirectReferer extends GeoIpRedirectBase {
  public function checkAndRedirect() {
    $base_url = $this->api->baseUrl();
    return substr($this->api->referer(), 0, strlen($base_url)) != $base_url;
  }
}

class GeoIpRedirectCookie extends GeoIpRedirectBase {
  public function checkAndRedirect() {
    $cookie = $this->api->readCookie();
    if (!$cookie)
      return TRUE;
    if ($cookie == $this->api->currentLanguage()) {
      return FALSE;
    } else {
      return $this->redirect($cookie);
    }
  }
}

class GeoIpRedirectCountry extends GeoIpRedirectBase {
  public function checkAndRedirect() {
    $country = $this->api->getCountry();
    $mapping = $this->api->getMapping();
    if (isset($mapping[$country])) {
      $this->redirect($mapping[$country]);
    } else {
      $this->redirect($this->api->defaultLanguage());
    }
  }
}

class GeoIpLanguageRedirect  {
  public static $instance = NULL;
  protected $api;
  protected $redirectPossible = TRUE;
  protected $originalCache = FALSE;
  protected $classes;
  
  public function fromDefaults() {
    return new static(
      new GeoIpDrupal(),
      array('GeoIpRedirectReferer'),
      array('GeoIpRedirectCookie', 'GeoIpRedirectCountry')
    );
  }
  
  public function __construct($api, $boot_classes, $language_init_classes) {
    $this->api = $api;
    $this->classes = array(
      'boot' => $boot_classes,
      'language_init' => $language_init_classes,
    );
  }
  
  public function hook_boot() {
    $classes = $this->classes['boot'];
    while ($this->redirectPossible && ($class = array_shift($classes))) {
      $redirector = new $class($this->api);
      $this->redirectPossible = $redirector->checkAndRedirect();
    }
    if ($this->redirectPossible) {
      $this->api->disableCache();
    }
  }

  public function hook_language_init() {
    $classes = $this->classes['language_init'];
    while ($this->redirectPossible && ($class = array_shift($classes))) {
      $redirector = new $class($this->api);
      $this->redirectPossible = $redirector->checkAndRedirect();
    }
    return $this->api->serveFromCache();
  }
  

}

/**
 * Implements hook_boot().
 * 
 * Checks if we possibly want to redirect to another URL and
 * disables page-cache if so.
 */
function geoip_redirect_boot() {
  GeoIPLanguageRedirect::$instance = GeoIpLanguageRedirect::fromDefaults();
  GeoIPLanguageRedirect::$instance->hook_boot();
}

/**
 * Implements hook_language_init().
 */
function geoip_redirect_language_init() {
  GeoIpLanguageRedirect::$instance->hook_language_init();
}
