<?php

class GeoIpRedirectController {
  protected static $instance = NULL;
  protected $originalCache = FALSE;

  /**
   * Prepare self::$instance if we might redirect in this request.
   *
   * Redirection is done if:
   *  - The referer doesn't match the current base_url (request came from outside).
   *  - The geoip_redirect-cookie isn't set (hasn't been redirected yet).
   */
  public static function hook_boot() {
    // Don't do anything if called via the CLI.
    if (php_sapi_name() === 'cli') { return; }

    if (self::isActive($GLOBALS['base_url'], $_SERVER['HTTP_REFERER'], isset($_COOKIE['geoip_redirect']))) {
      self::$instance = new GeoIpRedirectController();
    }
  }

  /**
   * Redirect and serve from cache
   * if self::$instance was set in self::hook_boot().
   */
  public static function hook_init() {
    if (isset(self::$instance)) {
      self::$instance->redirect(current_path());
      self::$instance->serveFromCache();
    };
  }

  /**
   * Set cookie and deactivate page-cache
   */
  public function __construct() {
    $this->setCookie();
    $this->deactivateCache();
  }

  /**
   * Check whether a redirect may happen in this request.
   */
  public static function isActive($referer, $base_url, $cookie) {
    $came_from_outside = substr($referer, 0, strlen($base_url)) != $base_url;
    return ($came_from_outside && !$cookie);
  }

  /**
   * Set geoip_redirect cookie.
   */
  protected function setCookie() {
    setcookie('geoip_redirect', '1', 0, $GLOBALS['base_path']);
  }

  /**
   * Deactivate Drupal's page cache and remember original config value.
   */
  protected function deactivateCache() {
    if ($this->originalCache = variable_get('cache')) {
      $GLOBALS['conf']['cache'] = FALSE;
    }
  }

  /**
   * Serve current URL from cache if possible.
   */
  protected function serveFromCache() {
    if ($this->originalCache) {
      $GLOBALS['conf']['cache'] = $this->originalCache;
    return;
      $cache = drupal_page_get_cache();
      if (is_object($cache)) {
        header('X-Drupal-Cache: HIT');
        drupal_serve_page_from_cache($cache);
        if (variable_get('page_cache_invoke_hooks', TRUE)) {
          bootstrap_invoke_all('exit');
        }
        // We are done.
        exit;
      }
    }
  }

  /**
   * Redirect to target URL.
   *
   * @param path of the current page
   * @param object that returns the language to be redirected to.
   */
  public function redirect($path, $language_source = NULL) {
    if (!$language_source) {
      $language_source = GeoIpRedirectMapping::fromDefaults();
    }
    $langCode = $language_source->selectLanguage();
    _geoip_redirect_goto($langCode, $path);
  }

}

/**
 * Mapping from country code to language.
 */
class GeoIpRedirectMapping {
  protected $country;
  protected $mapping;
  protected $defaultLanguage;

  /**
   * Default constructor uses:
   *  - GeoIP detected country
   *  - geoip_redirect_mapping from variable_get
   *  - Drupal default language.
   */
  public static function fromDefaults() {
    // use @: see https://bugs.php.net/bug.php?id=59753
    if (function_exists('geoip_country_code_by_name')) {
      $country = @geoip_country_code_by_name(ip_address());
    } else {
      $country = FALSE;
    }
    $mapping = variable_get('geoip_redirect_mapping', array());
    $language = language_default()->language;
    return new GeoIpRedirectMapping($mapping, $country, $language);
  }

  /**
   * Select the language based on country, mapping and default-language.
   */
  public function selectLanguage(){
    $country = &$this->country;
    //$_SESSION['geoip_redirect_country'] = $country;
    $mapping = &$this->mapping;
    if (isset($mapping[$country])) {
      return $mapping[$country];
    } else {
      return $this->defaultLanguage;
    }
  }

  /**
   * @param mapping array of format 'country-code' => 'language-code'.
   * @param country-code of the detected country.
   * @param language that is used if no applicable mapping is found. 
   */
  public function __construct($mapping, $country, $default_language) {
    $this->mapping = $mapping;
    $this->country = $country;
    $this->defaultLanguage = $default_language;
  }
}

/**
 * Implements hook_boot().
 * 
 * Checks if we possibly want to redirect to another URL and
 * disables page-cache if so.
 */
function geoip_redirect_boot() {
  GeoIpRedirectController::hook_boot();
}

/**
 * Implements hook_init().
 * 
 * Do redirect if needed.
 */
function geoip_redirect_init() {
  GeoIpRedirectController::hook_init();
}

/**
 * Redirect to the URL that shows the content of the current URL
 * in a given language.
 * 
 * @param language to be redirected to
 * @param string current URL.
 */
function _geoip_redirect_goto($lang, $path = NULL) {
  $path = isset($path) ? $path : current_path();
  $links = language_negotiation_get_switch_links('language', $path);
  if (!$links) {
    return;
  }
  $links = $links->links;
  if (!isset($links[$lang]) || !isset($links[$lang]['href'])) {
    $lang = language_default()->language;
  }
  $lang = 'de-AT';
  if (isset($links[$lang])) {
    $link = &$links[$lang];
    $path = isset($link['href']) ? $link['href'] : $path;
    drupal_goto($path, array('language' => $link['language']));
  }
}
